@model IlisanCommerce.Models.CartViewModel

@{
    ViewData["Title"] = "Sepetim";
    ViewData["MetaDescription"] = "Alışveriş sepetiniz - ILISAN";
}

<section class="main-banner mv-wrap">
    <div data-image-src="/images/background/demo_bg_1920x1680.png" class="mv-banner-style-1 mv-bg-overlay-dark overlay-0-85 mv-parallax">
        <div class="page-name mv-caption-style-6">
            <div class="container">
                <div class="mv-title-style-9"><span class="main">Sepetim</span><img src="/images/icon/icon_line_polygon_line.png" alt="icon" class="line" /></div>
            </div>
        </div>
    </div>
</section>

<section class="main-breadcrumb mv-wrap">
    <div class="mv-breadcrumb-style-1">
        <div class="container">
            <ul class="breadcrumb-1-list">
                <li><a asp-controller="Home" asp-action="Index"><i class="fa fa-home"></i></a></li>
                <li><a>Sepetim</a></li>
            </ul>
        </div>
    </div>
</section>

<section class="mv-main-body shopping-cart-main mv-bg-gray mv-wrap">
    <div class="container">
        @if (Model.CartItems != null && Model.CartItems.Any())
        {
            <div class="shopping-cart-inner">
                <div class="row">
                    <div class="col-xs-12 col-lg-8">
                        <div class="cart-table-wrapper">
                            <div class="mv-table-responsive">
                                <table class="mv-table-style-1 cart-table">
                                    <thead>
                                        <tr>
                                            <th class="tb-col-product">Ürün</th>
                                            <th class="tb-col-price text-center">Fiyat</th>
                                            <th class="tb-col-quantity text-center">Miktar</th>
                                            <th class="tb-col-total text-center">Toplam</th>
                                            <th class="tb-col-remove text-center">Kaldır</th>
                                        </tr>
                                    </thead>
                                    <tbody id="cart-items-tbody">
                                        @foreach (var item in Model.CartItems)
                                        {
                                            <tr class="cart-item" data-cart-item-id="@item.Id" data-product-id="@item.ProductId">
                                                <td class="tb-col-product">
                                                    <div class="cart-product-info">
                                                        <div class="product-image">
                                                            <a asp-controller="Product" asp-action="Details" asp-route-slug="@item.Product.Slug">
                                                                <img src="@(item.Product.ProductImages?.FirstOrDefault(pi => pi.IsMainImage)?.ImagePath ?? "/images/demo/demo_120x120.png")" alt="@item.Product.Name" class="cart-product-img" />
                                                            </a>
                                                        </div>
                                                        <div class="product-details">
                                                            <h6 class="product-name mb-2">
                                                                <a asp-controller="Product" asp-action="Details" asp-route-slug="@item.Product.Slug" class="product-title-link">@item.Product.Name</a>
                                                            </h6>
                                                            <div class="product-info-list">
                                                                <div class="product-code mb-1"><small class="text-muted">Ürün Kodu: <span class="fw-medium">@item.Product.ProductCode</span></small></div>
                                                                @if (item.ProductVariant != null)
                                                                {
                                                                    <div class="product-variant mb-1"><small class="text-muted">Seçenek: <span class="fw-medium text-primary">@item.ProductVariant.VariantName</span></small></div>
                                                                }
                                                                @if (!string.IsNullOrEmpty(item.Product.CertificateType))
                                                                {
                                                                    <div class="product-certificate mb-1">
                                                                        <small class="badge bg-info text-white">
                                                                            <i class="fa fa-certificate me-1"></i> @item.Product.CertificateType
                                                                        </small>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="tb-col-price text-center" data-label="Fiyat">
                                                    <div class="cart-item-price">@item.UnitPrice.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</div>
                                                </td>
                                                <td class="tb-col-quantity text-center" data-label="Miktar">
                                                    <div class="quantity-controls">
                                                        <button type="button" class="quantity-btn quantity-minus" data-action="decrease">-</button>
                                                        <input type="number"
                                                               class="quantity-input"
                                                               value="@item.Quantity"
                                                               min="1"
                                                               max="@item.Product.StockQuantity"
                                                               data-original-quantity="@item.Quantity" />
                                                        <button type="button" class="quantity-btn quantity-plus" data-action="increase">+</button>
                                                    </div>
                                                    <div class="quantity-update-buttons" style="margin-top: 5px; display: none;">
                                                        <button type="button" class="btn-update-quantity btn btn-sm btn-success">Güncelle</button>
                                                        <button type="button" class="btn-cancel-quantity btn btn-sm btn-secondary">İptal</button>
                                                    </div>
                                                </td>
                                                <td class="tb-col-total text-center" data-label="Toplam">
                                                    <div class="cart-item-total font-weight-bold">@item.TotalPrice.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</div>
                                                </td>
                                                <td class="tb-col-remove text-center" data-label="Kaldır">
                                                    <button type="button" class="btn-remove-item mv-btn mv-btn-style-4 btn-4-h-30" data-item-id="@item.Id" title="Sepetten Kaldır">
                                                        <i class="fa fa-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Cart Actions -->
                        <div class="cart-actions mv-wrap">
                            <div class="row">
                                <div class="col-xs-12 col-sm-6">
                                    <div class="cart-continue-shopping">
                                        <a asp-controller="Product" asp-action="Index" class="mv-btn mv-btn-style-5 btn-5-h-40">
                                            <span class="btn-inner">
                                                <i class="btn-icon fa fa-arrow-left"></i>
                                                <span class="btn-text">Alışverişe Devam Et</span>
                                            </span>
                                        </a>
                                    </div>
                                </div>
                                <div class="col-xs-12 col-sm-6 text-right">
                                    <div class="cart-update-actions">
                                        <button type="button" id="btn-clear-cart" class="mv-btn mv-btn-style-3 btn-3-h-40">
                                            <span class="btn-inner">
                                                <i class="btn-icon fa fa-trash"></i>
                                                <span class="btn-text">Sepeti Temizle</span>
                                            </span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Cart Summary -->
                    <div class="col-xs-12 col-lg-4">
                        <div class="cart-summary mv-box-shadow-gray-1 mv-bg-white">
                            <div class="cart-summary-header">
                                <h4>Sipariş Özeti</h4>
                            </div>
                            
                            <div class="cart-summary-body">
                                <div class="summary-row">
                                    <div class="summary-label">Ara Toplam:</div>
                                    <div class="summary-value" id="cart-subtotal">@Model.SubTotal.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</div>
                                </div>
                                
                                @if (Model.ShippingCost > 0)
                                {
                                    <div class="summary-row">
                                        <div class="summary-label">Kargo:</div>
                                        <div class="summary-value" id="cart-shipping">@Model.ShippingCost.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</div>
                                    </div>
                                }
                                else
                                {
                                    <div class="summary-row">
                                        <div class="summary-label">Kargo:</div>
                                        <div class="summary-value text-success">Ücretsiz</div>
                                    </div>
                                }
                                
                                @if (Model.TaxAmount > 0)
                                {
                                    <div class="summary-row">
                                        <div class="summary-label">KDV:</div>
                                        <div class="summary-value" id="cart-tax">@Model.TaxAmount.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</div>
                                    </div>
                                }
                                
                                @if (Model.DiscountAmount > 0)
                                {
                                    <div class="summary-row discount-row">
                                        <div class="summary-label text-success">İndirim:</div>
                                        <div class="summary-value text-success" id="cart-discount">-@Model.DiscountAmount.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</div>
                                    </div>
                                }
                                
                                <hr class="summary-divider">
                                
                                <div class="summary-row summary-total">
                                    <div class="summary-label"><strong>Toplam:</strong></div>
                                    <div class="summary-value"><strong id="cart-total">@Model.Total.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</strong></div>
                                </div>
                                
                                <div class="cart-item-count">
                                    <small class="text-muted">Toplam @Model.TotalItems adet ürün</small>
                                </div>
                            </div>
                            
                            <div class="cart-summary-footer">
                                <a asp-controller="Order" asp-action="Checkout" class="mv-btn mv-btn-style-1 btn-checkout">
                                    <span class="btn-inner">
                                        <i class="btn-icon fa fa-credit-card"></i>
                                        <span class="btn-text">Sipariş Ver</span>
                                    </span>
                                </a>
                                
                                <!-- Iyzico Hızlı Ödeme Butonları -->
                                <div class="quick-payment-options" style="margin-top: 15px;">
                                    <div class="payment-methods-header">
                                        <small class="text-muted">Hızlı Ödeme Seçenekleri:</small>
                                    </div>
                                    <div class="payment-buttons" style="margin-top: 10px;">
                                        <button type="button" class="btn btn-outline-primary btn-sm quick-pay-btn" data-payment-type="credit-card" style="margin-right: 5px; margin-bottom: 5px;">
                                            <img src="~/iyzico-logo-pack/checkout_iyzico_ile_ode/TR/Tr_Colored/iyzico_ile_ode_colored.png" 
                                                 alt="İyzico ile Öde" 
                                                 style="height: 16px; margin-right: 5px;" />
                                            Kredi Kartı
                                        </button>
                                        <button type="button" class="btn btn-outline-success btn-sm quick-pay-btn" data-payment-type="installment" style="margin-right: 5px; margin-bottom: 5px;">
                                            <img src="~/iyzico-logo-pack/checkout_iyzico_ile_ode/TR/Tr_Colored/iyzico_ile_ode_colored.png" 
                                                 alt="İyzico ile Öde" 
                                                 style="height: 16px; margin-right: 5px;" />
                                            Taksitli
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm quick-pay-btn" data-payment-type="bank-transfer" style="margin-right: 5px; margin-bottom: 5px;">
                                            <i class="fa fa-university"></i> Havale
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Secure Shopping Info -->
                        <div class="secure-shopping-info mv-wrap">
                            <div class="secure-info-item">
                                <i class="fa fa-shield text-success"></i>
                                <span>Güvenli Alışveriş</span>
                            </div>
                            <div class="secure-info-item">
                                <i class="fa fa-truck text-primary"></i>
                                <span>Hızlı Kargo</span>
                            </div>
                            <div class="secure-info-item">
                                <i class="fa fa-refresh text-info"></i>
                                <span>Kolay İade</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <!-- Empty Cart -->
            <div class="empty-cart-wrapper text-center">
                <div class="empty-cart-content">
                    <div class="empty-cart-icon">
                        <i class="fa fa-shopping-cart" style="font-size: 80px; color: #ddd; margin-bottom: 30px;"></i>
                    </div>
                    <h3>Sepetiniz Boş</h3>
                    <p class="empty-cart-message">Henüz sepetinize ürün eklemediniz.</p>
                    <div class="empty-cart-actions">
                        <a asp-controller="Product" asp-action="Index" class="mv-btn mv-btn-style-1 btn-start-shopping">
                            <span class="btn-inner">
                                <i class="btn-icon fa fa-shopping-bag"></i>
                                <span class="btn-text">Alışverişe Başla</span>
                            </span>
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Quantity controls - Fixed increment algorithm
            $('.quantity-plus, .quantity-minus').click(function() {
                var action = $(this).data('action');
                var input = $(this).siblings('.quantity-input');
                var currentVal = parseInt(input.val()) || 1;
                var minVal = parseInt(input.attr('min')) || 1;
                var maxVal = parseInt(input.attr('max')) || 999;
                var originalVal = parseInt(input.data('original-quantity'));

                var newVal = currentVal;

                // Fixed increment logic - always +1 or -1
                if (action === 'increase' && currentVal < maxVal) {
                    newVal = currentVal + 1;  // Always increment by 1
                } else if (action === 'decrease' && currentVal > minVal) {
                    newVal = currentVal - 1;  // Always decrement by 1
                }

                // Ensure the value is within bounds
                newVal = Math.max(minVal, Math.min(maxVal, newVal));

                input.val(newVal);

                // Show/hide update buttons
                var updateButtons = $(this).closest('.tb-col-quantity').find('.quantity-update-buttons');
                if (newVal !== originalVal) {
                    updateButtons.show();
                } else {
                    updateButtons.hide();
                }

                // Provide visual feedback
                input.addClass('quantity-changed');
                setTimeout(function() {
                    input.removeClass('quantity-changed');
                }, 300);
            });

            // Quantity input change
            $('.quantity-input').on('input', function() {
                var currentVal = parseInt($(this).val()) || 1;
                var originalVal = parseInt($(this).data('original-quantity'));
                var updateButtons = $(this).closest('.tb-col-quantity').find('.quantity-update-buttons');
                
                if (currentVal !== originalVal) {
                    updateButtons.show();
                } else {
                    updateButtons.hide();
                }
            });

            // Update quantity
            $('.btn-update-quantity').click(function() {
                var cartItemRow = $(this).closest('.cart-item');
                var cartItemId = cartItemRow.data('cart-item-id');
                var newQuantity = cartItemRow.find('.quantity-input').val();
                var button = $(this);
                
                button.prop('disabled', true).text('Güncelleniyor...');
                
                $.ajax({
                    url: '@Url.Action("UpdateQuantity", "Cart")',
                    type: 'POST',
                    data: {
                        cartItemId: cartItemId,
                        quantity: newQuantity
                    },
                    success: function(result) {
                        if (result.success) {
                            // Update original quantity
                            cartItemRow.find('.quantity-input').data('original-quantity', newQuantity);
                            
                            // Update item total
                            if (result.itemTotal !== undefined && result.itemTotal !== null) {
                                cartItemRow.find('.cart-item-total').text('₺' + result.itemTotal.toFixed(2).replace('.', ','));
                            }
                            
                            // Update cart totals
                            updateCartTotals(result);
                            
                            // Hide update buttons
                            $(button).closest('.quantity-update-buttons').hide();
                            
                            showMessage('Miktar güncellendi!', 'success');
                        } else {
                            showMessage(result.message || 'Güncelleme başarısız!', 'error');
                        }
                    },
                    error: function() {
                        showMessage('Bağlantı hatası!', 'error');
                    },
                    complete: function() {
                        button.prop('disabled', false).text('Güncelle');
                    }
                });
            });

            // Cancel quantity update
            $('.btn-cancel-quantity').click(function() {
                var cartItemRow = $(this).closest('.cart-item');
                var originalQuantity = cartItemRow.find('.quantity-input').data('original-quantity');
                
                cartItemRow.find('.quantity-input').val(originalQuantity);
                $(this).closest('.quantity-update-buttons').hide();
            });

            // Remove item from cart
            $('.btn-remove-item').click(function() {
                var cartItemId = $(this).data('item-id');
                var cartItemRow = $(this).closest('.cart-item');
                var button = $(this);
                
                if (confirm('Bu ürünü sepetten kaldırmak istediğinize emin misiniz?')) {
                    button.prop('disabled', true);
                    
                    $.ajax({
                        url: '@Url.Action("RemoveItem", "Cart")',
                        type: 'POST',
                        data: { cartItemId: cartItemId },
                        success: function(result) {
                            if (result.success) {
                                // Remove row with animation
                                cartItemRow.fadeOut(300, function() {
                                    $(this).remove();
                                    
                                    // Check if cart is empty
                                    if ($('#cart-items-tbody .cart-item').length === 0) {
                                        location.reload(); // Reload to show empty cart
                                    } else {
                                        // Update cart totals
                                        updateCartTotals(result);
                                    }
                                });
                                
                                showMessage('Ürün sepetten kaldırıldı!', 'success');
                            } else {
                                showMessage(result.message || 'Kaldırma başarısız!', 'error');
                                button.prop('disabled', false);
                            }
                        },
                        error: function() {
                            showMessage('Bağlantı hatası!', 'error');
                            button.prop('disabled', false);
                        }
                    });
                }
            });

            // Clear entire cart
            $('#btn-clear-cart').click(function() {
                if (confirm('Sepetteki tüm ürünleri kaldırmak istediğinize emin misiniz?')) {
                    var button = $(this);
                    button.prop('disabled', true).find('.btn-text').text('Temizleniyor...');
                    
                    $.ajax({
                        url: '@Url.Action("ClearCart", "Cart")',
                        type: 'POST',
                        success: function(result) {
                            if (result.success) {
                                location.reload(); // Reload to show empty cart
                            } else {
                                showMessage(result.message || 'Sepet temizleme başarısız!', 'error');
                                button.prop('disabled', false).find('.btn-text').text('Sepeti Temizle');
                            }
                        },
                        error: function() {
                            showMessage('Bağlantı hatası!', 'error');
                            button.prop('disabled', false).find('.btn-text').text('Sepeti Temizle');
                        }
                    });
                }
            });

            // Quick payment buttons
            $('.quick-pay-btn').click(function() {
                var paymentType = $(this).data('payment-type');
                var button = $(this);
                
                button.prop('disabled', true);
                
                // Show loading state
                var originalText = button.html();
                button.html('<i class="fa fa-spinner fa-spin"></i> Yükleniyor...');
                
                // Redirect to checkout with payment type
                var checkoutUrl = '@Url.Action("Checkout", "Order")' + '?paymentType=' + paymentType;
                
                setTimeout(function() {
                    window.location.href = checkoutUrl;
                }, 1000);
            });

            // Function to update cart totals
            function updateCartTotals(result) {
                if (result.cartTotals) {
                    if (result.cartTotals.subTotal !== undefined && result.cartTotals.subTotal !== null) {
                        $('#cart-subtotal').text('₺' + result.cartTotals.subTotal.toFixed(2).replace('.', ','));
                    }
                    if (result.cartTotals.total !== undefined && result.cartTotals.total !== null) {
                        $('#cart-total').text('₺' + result.cartTotals.total.toFixed(2).replace('.', ','));
                    }
                    
                    if (result.cartTotals.shippingCost !== undefined) {
                        $('#cart-shipping').text('₺' + result.cartTotals.shippingCost.toFixed(2).replace('.', ','));
                    }
                    if (result.cartTotals.taxAmount !== undefined) {
                        $('#cart-tax').text('₺' + result.cartTotals.taxAmount.toFixed(2).replace('.', ','));
                    }
                    if (result.cartTotals.discountAmount !== undefined) {
                        $('#cart-discount').text('-₺' + result.cartTotals.discountAmount.toFixed(2).replace('.', ','));
                    }
                }
                
                // Update cart count in header if exists
                if (result.cartCount !== undefined) {
                    $('.cart-count').text(result.cartCount);
                }
            }

            // Function to show messages
            function showMessage(message, type) {
                if (window.cartManager) {
                    window.cartManager.showToast({
                        type: type,
                        title: type === 'success' ? 'Başarılı!' : 'Hata!',
                        message: message,
                        duration: 4000
                    });
                } else {
                    // Fallback to simple alert
                    var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
                    var alertHtml = '<div class="alert ' + alertClass + ' alert-dismissible" role="alert">' +
                                   '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                                   '<span aria-hidden="true">&times;</span>' +
                                   '</button>' + message + '</div>';
                    
                    // Remove existing alerts
                    $('.alert').remove();
                    
                    // Add new alert at the top
                    $('.container').prepend(alertHtml);
                    
                    // Auto-hide after 3 seconds
                    setTimeout(function() {
                        $('.alert').fadeOut();
                    }, 3000);
                }
            }
        });
    </script>

    <style>
        .cart-table {
            width: 100%;
        }
        
        .cart-product-info {
            display: flex;
            align-items: flex-start;
            gap: 15px;
        }
        
        .product-image {
            flex-shrink: 0;
        }
        
        .cart-product-img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
        }
        
        .product-details h6 {
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .product-details .product-code,
        .product-details .product-variant,
        .product-details .product-certificate {
            font-size: 12px;
            color: #666;
            margin-bottom: 3px;
        }
        
        .quantity-controls {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }
        
        .quantity-btn {
            width: 30px;
            height: 30px;
            border: 1px solid #ddd;
            background: #f8f9fa;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .quantity-btn:hover {
            background: #e9ecef;
        }
        
        .quantity-input {
            width: 60px;
            height: 30px;
            text-align: center;
            border: 1px solid #ddd;
            transition: all 0.3s ease;
        }

        .quantity-input.quantity-changed {
            border-color: #007bff;
            background-color: #f0f8ff;
        }
        
        .cart-summary {
            padding: 20px;
            margin-bottom: 30px;
        }
        
        .cart-summary-header h4 {
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .summary-total {
            font-size: 18px;
            margin-top: 10px;
        }
        
        .summary-divider {
            margin: 15px 0;
        }
        
        .btn-checkout {
            width: 100%;
            padding: 15px;
            font-size: 16px;
            margin-top: 20px;
        }
        
        .secure-shopping-info {
            margin-top: 20px;
        }
        
        .secure-info-item {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            font-size: 14px;
        }
        
        .secure-info-item i {
            margin-right: 8px;
            width: 20px;
        }
        
        .empty-cart-wrapper {
            padding: 100px 20px;
        }
        
        .empty-cart-content {
            max-width: 400px;
            margin: 0 auto;
        }
        
        .empty-cart-message {
            color: #666;
            margin-bottom: 30px;
        }
        
        .cart-actions {
            margin-top: 30px;
            padding: 20px 0;
            border-top: 1px solid #eee;
        }
        
        @@media (max-width: 767px) {
            .cart-product-info {
                flex-direction: column;
                text-align: center;
            }
            
            .tb-col-product,
            .tb-col-price,
            .tb-col-quantity,
            .tb-col-total,
            .tb-col-remove {
                display: block;
                width: 100% !important;
                text-align: center !important;
                padding: 10px !important;
                border-bottom: 1px solid #eee;
            }
            
            .cart-table thead {
                display: none;
            }
            
            .cart-table tr {
                display: block;
                margin-bottom: 20px;
                border: 1px solid #eee;
            }
        }
    </style>

    <script>
        $(document).ready(function() {
            // Live cart update functionality
            const CartPageManager = {
                init: function() {
                    this.bindQuantityControls();
                    this.bindRemoveButtons();
                },

                bindQuantityControls: function() {
                    // Quantity input change
                    $(document).on('input', '.quantity-input', function() {
                        const $input = $(this);
                        const newQuantity = parseInt($input.val()) || 1;
                        const originalQuantity = parseInt($input.data('original-quantity'));
                        const $row = $input.closest('.cart-item');
                        const $updateButtons = $row.find('.quantity-update-buttons');

                        if (newQuantity !== originalQuantity) {
                            $updateButtons.show();
                        } else {
                            $updateButtons.hide();
                        }

                        // Update row total instantly (visual feedback)
                        this.updateRowTotalPreview($row, newQuantity);
                    });

                    // Quantity buttons (+/-)
                    $(document).on('click', '.quantity-btn', function() {
                        const $btn = $(this);
                        const $input = $btn.siblings('.quantity-input');
                        const action = $btn.data('action');
                        let currentQuantity = parseInt($input.val()) || 1;
                        const maxQuantity = parseInt($input.attr('max')) || 999;

                        if (action === 'increase' && currentQuantity < maxQuantity) {
                            currentQuantity++;
                        } else if (action === 'decrease' && currentQuantity > 1) {
                            currentQuantity--;
                        }

                        $input.val(currentQuantity).trigger('input');
                    });

                    // Update quantity button
                    $(document).on('click', '.btn-update-quantity', function() {
                        const $btn = $(this);
                        const $row = $btn.closest('.cart-item');
                        const cartItemId = $row.data('cart-item-id');
                        const newQuantity = parseInt($row.find('.quantity-input').val());
                        
                        CartPageManager.updateCartItemQuantity(cartItemId, newQuantity, $row);
                    });

                    // Cancel quantity button
                    $(document).on('click', '.btn-cancel-quantity', function() {
                        const $btn = $(this);
                        const $row = $btn.closest('.cart-item');
                        const $input = $row.find('.quantity-input');
                        const originalQuantity = $input.data('original-quantity');
                        
                        $input.val(originalQuantity);
                        $btn.closest('.quantity-update-buttons').hide();
                        CartPageManager.updateRowTotalPreview($row, originalQuantity);
                    });
                },

                bindRemoveButtons: function() {
                    $(document).on('click', '.btn-remove-item', function(e) {
                        e.preventDefault();
                        const $btn = $(this);
                        const cartItemId = $btn.data('item-id');
                        const $row = $btn.closest('.cart-item');
                        
                        if (confirm('Bu ürünü sepetinizden kaldırmak istediğinizden emin misiniz?')) {
                            CartPageManager.removeCartItem(cartItemId, $row);
                        }
                    });
                },

                updateRowTotalPreview: function($row, quantity) {
                    const unitPriceText = $row.find('.cart-item-price').text();
                    const unitPrice = parseFloat(unitPriceText.replace(/[^\d,]/g, '').replace(',', '.'));
                    const newTotal = unitPrice * quantity;
                    
                    $row.find('.cart-item-total').text(new Intl.NumberFormat('tr-TR', {
                        style: 'currency',
                        currency: 'TRY'
                    }).format(newTotal));

                    // Update grand total preview
                    this.updateGrandTotalPreview();
                },

                updateGrandTotalPreview: function() {
                    let grandTotal = 0;
                    $('.cart-item').each(function() {
                        const totalText = $(this).find('.cart-item-total').text();
                        const total = parseFloat(totalText.replace(/[^\d,]/g, '').replace(',', '.'));
                        if (!isNaN(total)) {
                            grandTotal += total;
                        }
                    });

                    $('#cart-subtotal, #cart-grand-total').text(new Intl.NumberFormat('tr-TR', {
                        style: 'currency',
                        currency: 'TRY'
                    }).format(grandTotal));
                },

                updateCartItemQuantity: async function(cartItemId, quantity, $row) {
                    const $updateBtn = $row.find('.btn-update-quantity');
                    const originalText = $updateBtn.text();

                    $updateBtn.html('<i class="fa fa-spinner fa-spin"></i>').prop('disabled', true);
                    $row.addClass('updating');

                    try {
                        const formData = new FormData();
                        formData.append('cartItemId', cartItemId);
                        formData.append('quantity', quantity);

                        const response = await fetch('/Cart/UpdateQuantity', {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                            },
                            body: formData
                        });

                        const data = await response.json();

                        if (response.ok && data.success) {
                            // Update original quantity immediately
                            $row.find('.quantity-input').data('original-quantity', quantity);
                            $row.find('.quantity-update-buttons').hide();

                            // Update row total with real data
                            if (data.itemTotal) {
                                $row.find('.cart-item-total').text(new Intl.NumberFormat('tr-TR', {
                                    style: 'currency',
                                    currency: 'TRY'
                                }).format(data.itemTotal));
                            }

                            // Update cart totals with real data
                            if (data.cartTotals) {
                                if (data.cartTotals.subTotal !== undefined) {
                                    $('#cart-subtotal').text(new Intl.NumberFormat('tr-TR', {
                                        style: 'currency',
                                        currency: 'TRY'
                                    }).format(data.cartTotals.subTotal));
                                }
                                if (data.cartTotals.total !== undefined) {
                                    $('#cart-total').text(new Intl.NumberFormat('tr-TR', {
                                        style: 'currency',
                                        currency: 'TRY'
                                    }).format(data.cartTotals.total));
                                }
                                if (data.cartTotals.shippingCost !== undefined) {
                                    $('#cart-shipping').text(new Intl.NumberFormat('tr-TR', {
                                        style: 'currency',
                                        currency: 'TRY'
                                    }).format(data.cartTotals.shippingCost));
                                }
                                if (data.cartTotals.taxAmount !== undefined) {
                                    $('#cart-tax').text(new Intl.NumberFormat('tr-TR', {
                                        style: 'currency',
                                        currency: 'TRY'
                                    }).format(data.cartTotals.taxAmount));
                                }
                                if (data.cartTotals.discountAmount !== undefined) {
                                    $('#cart-discount').text('-' + new Intl.NumberFormat('tr-TR', {
                                        style: 'currency',
                                        currency: 'TRY'
                                    }).format(data.cartTotals.discountAmount));
                                }
                            }

                            // Update cart count in header immediately
                            if (data.cartCount !== undefined) {
                                if (window.cartManager) {
                                    window.cartManager.updateCartCountDisplay(data.cartCount);
                                }
                                // Also update mini cart
                                $('#cart-count, .btn-my-cart .number').text(data.cartCount);
                                const itemText = data.cartCount === 1 ? 'ürün' : 'ürün';
                                $('#cart-items-count').text(`${data.cartCount} ${itemText}`);
                            }

                            // Add success visual feedback
                            $row.addClass('success-update');
                            setTimeout(() => {
                                $row.removeClass('success-update');
                            }, 600);

                            // Show success message
                            this.showMessage('Sepet güncellendi!', 'success');

                        } else {
                            // Reset quantity on error
                            const originalQuantity = $row.find('.quantity-input').data('original-quantity');
                            $row.find('.quantity-input').val(originalQuantity);
                            this.updateRowTotalPreview($row, originalQuantity);
                            this.showMessage(data.message || 'Sepet güncellenemedi.', 'error');
                        }
                    } catch (error) {
                        console.error('Update quantity error:', error);
                        // Reset quantity on error
                        const originalQuantity = $row.find('.quantity-input').data('original-quantity');
                        $row.find('.quantity-input').val(originalQuantity);
                        this.updateRowTotalPreview($row, originalQuantity);
                        this.showMessage('Bir hata oluştu. Lütfen tekrar deneyin.', 'error');
                    } finally {
                        $updateBtn.text(originalText).prop('disabled', false);
                        $row.removeClass('updating');
                    }
                },

                removeCartItem: async function(cartItemId, $row) {
                    const $removeBtn = $row.find('.btn-remove-item');
                    const originalHtml = $removeBtn.html();
                    
                    $removeBtn.html('<i class="fa fa-spinner fa-spin"></i>').prop('disabled', true);

                    try {
                        const formData = new FormData();
                        formData.append('cartItemId', cartItemId);

                        const response = await fetch('/Cart/RemoveItem', {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() || ''
                            },
                            body: formData
                        });

                        const data = await response.json();

                        if (response.ok && data.success) {
                            // Remove row with animation
                            $row.fadeOut(300, function() {
                                $(this).remove();
                                CartPageManager.updateGrandTotalPreview();
                                
                                // Check if cart is empty
                                if ($('.cart-item').length === 0) {
                                    location.reload();
                                }
                            });
                            
                            // Update cart count in header
                            if (window.cartManager) {
                                window.cartManager.updateCartCountDisplay(data.cartCount);
                            }
                            
                            this.showMessage('Ürün sepetten kaldırıldı!', 'success');
                        } else {
                            this.showMessage(data.message || 'Ürün sepetten kaldırılamadı.', 'error');
                            $removeBtn.html(originalHtml).prop('disabled', false);
                        }
                    } catch (error) {
                        console.error('Remove item error:', error);
                        this.showMessage('Bir hata oluştu. Lütfen tekrar deneyin.', 'error');
                        $removeBtn.html(originalHtml).prop('disabled', false);
                    }
                },

                showMessage: function(message, type = 'info') {
                    if (window.cartManager) {
                        window.cartManager.showToast({
                            type: type,
                            message: message,
                            duration: 3000
                        });
                    } else {
                        alert(message);
                    }
                }
            };

            // Initialize cart page manager
            CartPageManager.init();
        });
    </script>
}